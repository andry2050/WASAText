openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: Fantastic Coffee (decaffeinated)
  description: Fantastic Coffee (decaffeinated), the skeleton project for Web and Software architecture course
  version: 1.0.0
paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
      required: true
    responses:
      '201':
        description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                identifier:
                # change here if you decide to use an integer
                # or any other type of identifier
                type: string
                example: "abcdef012345"
  /users:
      get:
        tags: ["User"]
        summary: Get list of users
        operationId: getUsers
        responses:
          '200':
            description: List of registered users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "Maria"
  
    /users/me:
      patch:
        tags: ["User"]
        summary: Set my username
        operationId: setMyUserName
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "MariaNew"
        responses:
          '200':
            description: Username updated successfully
  
    /users/me/photo:
      patch:
        tags: ["User"]
        summary: Set my profile photo
        operationId: setMyPhoto
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoUrl:
                    type: string
                    format: uri
                    example: "https://example.com/photo.jpg"
        responses:
          '200':
            description: Profile photo updated successfully
  
    /conversations:
      get:
        tags: ["Conversations"]
        summary: Get user's conversations
        operationId: getMyConversations
        responses:
          '200':
            description: List of conversations
  
    /conversations/{conversationId}:
      get:
        tags: ["Conversations"]
        summary: Get a conversation by ID
        operationId: getConversation
        parameters:
          - name: conversationId
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Conversation details
  
    /messages:
      post:
        tags: ["Messages"]
        summary: Send a new message
        operationId: sendMessage
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: string
                    example: "conv123"
                  sender:
                    type: string
                    example: "Maria"
                  content:
                    type: string
                    example: "Ciao!"
        responses:
          '201':
            description: Message sent successfully
  
    /messages/{messageId}:
      delete:
        tags: ["Messages"]
        summary: Delete a message
        operationId: deleteMessage
        parameters:
          - name: messageId
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Message deleted successfully
  
    /messages/{messageId}/comment:
      post:
        tags: ["Messages"]
        summary: Comment on a message
        operationId: commentMessage
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "Nice one!"
        responses:
          '201':
            description: Comment added successfully
  
      delete:
        tags: ["Messages"]
        summary: Remove a comment from a message
        operationId: uncommentMessage
        parameters:
          - name: messageId
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Comment removed successfully

